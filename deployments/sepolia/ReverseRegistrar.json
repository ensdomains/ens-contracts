{
  "address": "0xCF75B92126B02C9811d8c632144288a3eb84afC8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ENS",
          "name": "ensAddr",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidSignature",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ResolverAddressZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SignatureExpired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SignatureExpiryTooHigh",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorised",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "controller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "ControllerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        }
      ],
      "name": "DefaultResolverChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "ReverseClaimed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "claim",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        }
      ],
      "name": "claimForAddr",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "signatureExpiry",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "claimForAddrWithSignature",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        }
      ],
      "name": "claimWithResolver",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "controllers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultResolver",
      "outputs": [
        {
          "internalType": "contract INameSetterResolver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ens",
      "outputs": [
        {
          "internalType": "contract ENS",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "node",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "controller",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        }
      ],
      "name": "setDefaultResolver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "setName",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "setNameForAddr",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "signatureExpiry",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "setNameForAddrWithSignature",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x06a3c7461a0649d524fb192dd64e95ee9405adc9c63a96050e663046b532acc8",
  "receipt": {
    "to": null,
    "from": "0x0F32b753aFc8ABad9Ca6fE589F707755f4df2353",
    "contractAddress": "0xCF75B92126B02C9811d8c632144288a3eb84afC8",
    "transactionIndex": 19,
    "gasUsed": "1313992",
    "logsBloom": "0x
    "blockHash": "0x32020d9690b16ce05b6374ae36ef1679abaf32e445da675282b733e8855019eb",
    "transactionHash": "0x06a3c7461a0649d524fb192dd64e95ee9405adc9c63a96050e663046b532acc8",
    "logs": [
      {
        "transactionIndex": 19,
        "blockNumber": 6926822,
        "transactionHash": "0x06a3c7461a0649d524fb192dd64e95ee9405adc9c63a96050e663046b532acc8",
        "address": "0xCF75B92126B02C9811d8c632144288a3eb84afC8",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000f32b753afc8abad9ca6fe589f707755f4df2353"
        ],
        "data": "0x",
        "logIndex": 41,
        "blockHash": "0x32020d9690b16ce05b6374ae36ef1679abaf32e445da675282b733e8855019eb"
      },
      {
        "transactionIndex": 19,
        "blockNumber": 6926822,
        "transactionHash": "0x06a3c7461a0649d524fb192dd64e95ee9405adc9c63a96050e663046b532acc8",
        "address": "0x9cb4A33f6034154A57cd10165C6e56E42714f288",
        "topics": [
          "0x6ada868dd3058cf77a48a74489fd7963688e5464b2b0fa957ace976243270e92",
          "0x000000000000000000000000cf75b92126b02c9811d8c632144288a3eb84afc8",
          "0xd4b78c2b2c7f0a148529578a4ed1e638bff8e447d2380cd584dfe03c51d19cac"
        ],
        "data": "0x",
        "logIndex": 42,
        "blockHash": "0x32020d9690b16ce05b6374ae36ef1679abaf32e445da675282b733e8855019eb"
      },
      {
        "transactionIndex": 19,
        "blockNumber": 6926822,
        "transactionHash": "0x06a3c7461a0649d524fb192dd64e95ee9405adc9c63a96050e663046b532acc8",
        "address": "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
        "topics": [
          "0xce0457fe73731f824cc272376169235128c118b49d344817417c6d108d155e82",
          "0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2",
          "0xfb12efc2bc933a1fd52b24b2d2f09b47013f359c08eadadee49656106d1e57a8"
        ],
        "data": "0x0000000000000000000000000f32b753afc8abad9ca6fe589f707755f4df2353",
        "logIndex": 43,
        "blockHash": "0x32020d9690b16ce05b6374ae36ef1679abaf32e445da675282b733e8855019eb"
      }
    ],
    "blockNumber": 6926822,
    "cumulativeGasUsed": "4562713",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e"
  ],
  "numDeployments": 1,
  "solcInputHash": "8ee30aacb19aeba801c0041712610933",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ENS\",\"name\":\"ensAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ResolverAddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignatureExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignatureExpiryTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorised\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"ControllerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"DefaultResolverChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"ReverseClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"claimForAddr\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"signatureExpiry\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"claimForAddrWithSignature\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"claimWithResolver\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultResolver\",\"outputs\":[{\"internalType\":\"contract INameSetterResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ens\",\"outputs\":[{\"internalType\":\"contract ENS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"node\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"setDefaultResolver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"setNameForAddr\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"signatureExpiry\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"setNameForAddrWithSignature\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"claim(address)\":{\"params\":{\"owner\":\"The address to set as the owner of the reverse record in ENS.\"},\"returns\":{\"_0\":\"The ENS node hash of the reverse record\"}},\"claimForAddr(address,address,address)\":{\"params\":{\"addr\":\"The address to claim the reverse record for\",\"owner\":\"The address to set as the owner of the reverse record\",\"resolver\":\"The resolver of the reverse node\"},\"returns\":{\"_0\":\"The ENS node hash of the reverse record\"}},\"claimForAddrWithSignature(address,address,address,uint256,bytes)\":{\"params\":{\"addr\":\"The address to claim the reverse record for\",\"owner\":\"The address to set as the owner of the reverse record\",\"resolver\":\"The resolver of the reverse node\",\"signature\":\"The signature to authorise the claim\",\"signatureExpiry\":\"The expiry of the signature\"},\"returns\":{\"_0\":\"The ENS node hash of the reverse record\"}},\"claimWithResolver(address,address)\":{\"params\":{\"owner\":\"The address to set as the owner of the reverse record\",\"resolver\":\"The resolver of the reverse node\"},\"returns\":{\"_0\":\"The ENS node hash of the reverse record\"}},\"constructor\":{\"params\":{\"ensAddr\":\"The address of the ENS registry\"}},\"node(address)\":{\"params\":{\"addr\":\"The address to get the reverse node hash for\"},\"returns\":{\"_0\":\"The ENS node hash\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setDefaultResolver(address)\":{\"params\":{\"resolver\":\"The resolver to set\"}},\"setName(string)\":{\"params\":{\"name\":\"The name to set for the calling account\"},\"returns\":{\"_0\":\"The ENS node hash of the reverse record\"}},\"setNameForAddr(address,address,address,string)\":{\"params\":{\"addr\":\"The reverse record to set\",\"name\":\"The name to set for the provided address\",\"owner\":\"The owner of the reverse node\",\"resolver\":\"The resolver of the reverse node\"},\"returns\":{\"_0\":\"The ENS node hash of the reverse record\"}},\"setNameForAddrWithSignature(address,address,address,uint256,bytes,string)\":{\"params\":{\"addr\":\"The reverse record to set\",\"name\":\"The name to set for the provided address\",\"owner\":\"The owner of the reverse node\",\"resolver\":\"The resolver of the reverse node\",\"signature\":\"The signature to authorise the claim\",\"signatureExpiry\":\"The expiry of the signature\"},\"returns\":{\"_0\":\"The ENS node hash of the reverse record\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"ADDR_REVERSE_NODE\":{\"details\":\"`namehash('addr.reverse')`\"}},\"title\":\"ENS Reverse Registrar\",\"version\":1},\"userdoc\":{\"errors\":{\"InvalidSignature()\":[{\"notice\":\"The signature is invalid\"}],\"ResolverAddressZero()\":[{\"notice\":\"Thrown when the resolver address is zero\"}],\"SignatureExpired()\":[{\"notice\":\"The signature has expired\"}],\"SignatureExpiryTooHigh()\":[{\"notice\":\"The signature expiry is too high\"}],\"Unauthorised()\":[{\"notice\":\"Thrown when the caller is not authorised to perform the action\"}]},\"events\":{\"DefaultResolverChanged(address)\":{\"notice\":\"Emitted when the default resolver is changed.\"},\"ReverseClaimed(address,bytes32)\":{\"notice\":\"Emitted when a reverse record is claimed.\"}},\"kind\":\"user\",\"methods\":{\"claim(address)\":{\"notice\":\"Transfers ownership of the reverse ENS record associated with the         calling account.\"},\"claimForAddr(address,address,address)\":{\"notice\":\"Transfers ownership of the reverse ENS record associated with the         addr provided account.\"},\"claimForAddrWithSignature(address,address,address,uint256,bytes)\":{\"notice\":\"Transfers ownership of the reverse ENS record associated with the         addr provided account using a signature to authorise.\"},\"claimWithResolver(address,address)\":{\"notice\":\"Transfers ownership of the reverse ENS record associated with the         calling account.\"},\"constructor\":{\"notice\":\"Sets the ENS registry and claims `addr.reverse`\"},\"defaultResolver()\":{\"notice\":\"The default resolver\"},\"ens()\":{\"notice\":\"The ENS registry\"},\"node(address)\":{\"notice\":\"Returns the ENS node hash for the reverse record associated with         the addr provided account.\"},\"setDefaultResolver(address)\":{\"notice\":\"Sets the default resolver\"},\"setName(string)\":{\"notice\":\"Sets the `name()` record for the reverse ENS record associated         with the calling account, and updates the resolver to the         default reverse resolver.\"},\"setNameForAddr(address,address,address,string)\":{\"notice\":\"Sets the `name()` record for the reverse ENS record associated         with the addr provided account, and updates the resolver to the         resolver provided.\"},\"setNameForAddrWithSignature(address,address,address,uint256,bytes,string)\":{\"notice\":\"Sets the `name()` record for the reverse ENS record associated         with the addr provided account using a signature to authorise,         and updates the resolver to the resolver provided.\"}},\"notice\":\"The registrar for reverse records on ENS\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/reverseRegistrar/ReverseRegistrar.sol\":\"ReverseRegistrar\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Gnosis Safe.\\n *\\n * _Available since v4.1._\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(address signer, bytes32 hash, bytes memory signature) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\\n        return\\n            (error == ECDSA.RecoverError.NoError && recovered == signer) ||\\n            isValidERC1271SignatureNow(signer, hash, signature);\\n    }\\n\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. The signature is validated\\n     * against the signer smart contract using ERC1271.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidERC1271SignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\\n        );\\n        return (success &&\\n            result.length >= 32 &&\\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\\n    }\\n}\\n\",\"keccak256\":\"0x3af3ca86df39aac39a0514c84459d691434a108d2151c8ce9d69f32e315cab80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/registry/ENS.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface ENS {\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner\\n    ) external returns (bytes32);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setOwner(bytes32 node, address owner) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function owner(bytes32 node) external view returns (address);\\n\\n    function resolver(bytes32 node) external view returns (address);\\n\\n    function ttl(bytes32 node) external view returns (uint64);\\n\\n    function recordExists(bytes32 node) external view returns (bool);\\n\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8e208b44d5dbf22552fe72d79b45c640855b84fbc9ee21f4c3bb4bfe81cbe8db\",\"license\":\"MIT\"},\"contracts/reverseRegistrar/IReverseRegistrar.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Interface for the reverse registrar\\ninterface IReverseRegistrar {\\n    /// @notice Emitted when a reverse record is claimed.\\n    /// @param addr The address that the reverse record is claimed for\\n    /// @param node The ENS node hash of the reverse record\\n    event ReverseClaimed(address indexed addr, bytes32 indexed node);\\n\\n    /// @notice Emitted when the default resolver is changed.\\n    /// @param resolver The resolver that was set\\n    event DefaultResolverChanged(address indexed resolver);\\n\\n    /// @notice Thrown when the caller is not authorised to perform the action\\n    error Unauthorised();\\n\\n    /// @notice Thrown when the resolver address is zero\\n    error ResolverAddressZero();\\n\\n    /// @notice Sets the default resolver\\n    /// @param resolver The resolver to set\\n    function setDefaultResolver(address resolver) external;\\n\\n    /// @notice Transfers ownership of the reverse ENS record associated with the\\n    ///         calling account.\\n    /// @param owner The address to set as the owner of the reverse record in ENS.\\n    /// @return The ENS node hash of the reverse record\\n    function claim(address owner) external returns (bytes32);\\n\\n    /// @notice Transfers ownership of the reverse ENS record associated with the\\n    ///         addr provided account.\\n    /// @param addr The address to claim the reverse record for\\n    /// @param owner The address to set as the owner of the reverse record\\n    /// @param resolver The resolver of the reverse node\\n    /// @return The ENS node hash of the reverse record\\n    function claimForAddr(\\n        address addr,\\n        address owner,\\n        address resolver\\n    ) external returns (bytes32);\\n\\n    /// @notice Transfers ownership of the reverse ENS record associated with the\\n    ///         addr provided account using a signature to authorise.\\n    /// @param addr The address to claim the reverse record for\\n    /// @param owner The address to set as the owner of the reverse record\\n    /// @param resolver The resolver of the reverse node\\n    /// @param signatureExpiry The expiry of the signature\\n    /// @param signature The signature to authorise the claim\\n    /// @return The ENS node hash of the reverse record\\n    function claimForAddrWithSignature(\\n        address addr,\\n        address owner,\\n        address resolver,\\n        uint256 signatureExpiry,\\n        bytes calldata signature\\n    ) external returns (bytes32);\\n\\n    /// @notice Transfers ownership of the reverse ENS record associated with the\\n    ///         calling account.\\n    /// @param owner The address to set as the owner of the reverse record\\n    /// @param resolver The resolver of the reverse node\\n    /// @return The ENS node hash of the reverse record\\n    function claimWithResolver(\\n        address owner,\\n        address resolver\\n    ) external returns (bytes32);\\n\\n    /// @notice Sets the `name()` record for the reverse ENS record associated\\n    ///         with the calling account, and updates the resolver to the\\n    ///         default reverse resolver.\\n    /// @param name The name to set for the calling account\\n    /// @return The ENS node hash of the reverse record\\n    function setName(string memory name) external returns (bytes32);\\n\\n    /// @notice Sets the `name()` record for the reverse ENS record associated\\n    ///         with the addr provided account, and updates the resolver to the\\n    ///         resolver provided.\\n    /// @param addr The reverse record to set\\n    /// @param owner The owner of the reverse node\\n    /// @param resolver The resolver of the reverse node\\n    /// @param name The name to set for the provided address\\n    /// @return The ENS node hash of the reverse record\\n    function setNameForAddr(\\n        address addr,\\n        address owner,\\n        address resolver,\\n        string memory name\\n    ) external returns (bytes32);\\n\\n    /// @notice Sets the `name()` record for the reverse ENS record associated\\n    ///         with the addr provided account using a signature to authorise,\\n    ///         and updates the resolver to the resolver provided.\\n    /// @param addr The reverse record to set\\n    /// @param owner The owner of the reverse node\\n    /// @param resolver The resolver of the reverse node\\n    /// @param signatureExpiry The expiry of the signature\\n    /// @param signature The signature to authorise the claim\\n    /// @param name The name to set for the provided address\\n    /// @return The ENS node hash of the reverse record\\n    function setNameForAddrWithSignature(\\n        address addr,\\n        address owner,\\n        address resolver,\\n        uint256 signatureExpiry,\\n        bytes calldata signature,\\n        string memory name\\n    ) external returns (bytes32);\\n\\n    /// @notice Returns the ENS node hash for the reverse record associated with\\n    ///         the addr provided account.\\n    /// @param addr The address to get the reverse node hash for\\n    /// @return The ENS node hash\\n    function node(address addr) external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0x78754404ae6726501aa3b2c234167c3696237a012ca58aabe3e5356232a0bdbf\",\"license\":\"MIT\"},\"contracts/reverseRegistrar/ReverseRegistrar.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nimport {ENS} from \\\"../registry/ENS.sol\\\";\\nimport {Controllable} from \\\"../root/Controllable.sol\\\";\\nimport {AddressUtils} from \\\"../utils/AddressUtils.sol\\\";\\n\\nimport {IReverseRegistrar} from \\\"./IReverseRegistrar.sol\\\";\\nimport {SignatureUtils} from \\\"./SignatureUtils.sol\\\";\\n\\ninterface INameSetterResolver {\\n    function setName(bytes32 node, string memory name) external;\\n}\\n\\n/// @title ENS Reverse Registrar\\n/// @notice The registrar for reverse records on ENS\\ncontract ReverseRegistrar is Ownable, Controllable, ERC165, IReverseRegistrar {\\n    using SignatureUtils for bytes;\\n    using ECDSA for bytes32;\\n    using AddressUtils for address;\\n\\n    /// @dev `namehash('addr.reverse')`\\n    bytes32 constant ADDR_REVERSE_NODE =\\n        0x91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2;\\n\\n    /// @notice The ENS registry\\n    ENS public immutable ens;\\n\\n    /// @notice The default resolver\\n    INameSetterResolver public defaultResolver;\\n\\n    /// @notice Sets the ENS registry and claims `addr.reverse`\\n    /// @param ensAddr The address of the ENS registry\\n    constructor(ENS ensAddr) {\\n        ens = ensAddr;\\n\\n        // Assign ownership of the reverse record to our deployer\\n        ReverseRegistrar oldRegistrar = ReverseRegistrar(\\n            ensAddr.owner(ADDR_REVERSE_NODE)\\n        );\\n        if (address(oldRegistrar) != address(0x0)) {\\n            oldRegistrar.claim(msg.sender);\\n        }\\n    }\\n\\n    /// @notice Modifier to check if the caller is authorised to perform an action.\\n    /// @param addr The address to check\\n    modifier authorised(address addr) {\\n        if (\\n            addr != msg.sender &&\\n            !controllers[msg.sender] &&\\n            !ens.isApprovedForAll(addr, msg.sender) &&\\n            !ownsContract(addr)\\n        ) {\\n            revert Unauthorised();\\n        }\\n        _;\\n    }\\n\\n    /// @inheritdoc IReverseRegistrar\\n    function setDefaultResolver(address resolver) public override onlyOwner {\\n        if (address(resolver) == address(0)) revert ResolverAddressZero();\\n        defaultResolver = INameSetterResolver(resolver);\\n        emit DefaultResolverChanged(resolver);\\n    }\\n\\n    /// @inheritdoc IReverseRegistrar\\n    function claim(address owner) public override returns (bytes32) {\\n        return claimForAddr(msg.sender, owner, address(defaultResolver));\\n    }\\n\\n    /// @inheritdoc IReverseRegistrar\\n    function claimForAddr(\\n        address addr,\\n        address owner,\\n        address resolver\\n    ) public override authorised(addr) returns (bytes32) {\\n        bytes32 labelHash = addr.sha3HexAddress();\\n        bytes32 reverseNode = keccak256(\\n            abi.encodePacked(ADDR_REVERSE_NODE, labelHash)\\n        );\\n        emit ReverseClaimed(addr, reverseNode);\\n        ens.setSubnodeRecord(ADDR_REVERSE_NODE, labelHash, owner, resolver, 0);\\n        return reverseNode;\\n    }\\n\\n    /// @inheritdoc IReverseRegistrar\\n    function claimForAddrWithSignature(\\n        address addr,\\n        address owner,\\n        address resolver,\\n        uint256 signatureExpiry,\\n        bytes memory signature\\n    ) public override returns (bytes32) {\\n        bytes32 labelHash = addr.sha3HexAddress();\\n        bytes32 reverseNode = keccak256(\\n            abi.encodePacked(ADDR_REVERSE_NODE, labelHash)\\n        );\\n\\n        bytes32 hash = keccak256(\\n            abi.encodePacked(\\n                IReverseRegistrar.claimForAddrWithSignature.selector,\\n                addr,\\n                owner,\\n                resolver,\\n                signatureExpiry\\n            )\\n        );\\n\\n        bytes32 message = hash.toEthSignedMessageHash();\\n\\n        signature.validateSignatureWithExpiry(addr, message, signatureExpiry);\\n\\n        emit ReverseClaimed(addr, reverseNode);\\n        ens.setSubnodeRecord(ADDR_REVERSE_NODE, labelHash, owner, resolver, 0);\\n        return reverseNode;\\n    }\\n\\n    /// @inheritdoc IReverseRegistrar\\n    function claimWithResolver(\\n        address owner,\\n        address resolver\\n    ) public override returns (bytes32) {\\n        return claimForAddr(msg.sender, owner, resolver);\\n    }\\n\\n    /// @inheritdoc IReverseRegistrar\\n    function setName(string calldata name) public override returns (bytes32) {\\n        return\\n            setNameForAddr(\\n                msg.sender,\\n                msg.sender,\\n                address(defaultResolver),\\n                name\\n            );\\n    }\\n\\n    /// @inheritdoc IReverseRegistrar\\n    function setNameForAddr(\\n        address addr,\\n        address owner,\\n        address resolver,\\n        string calldata name\\n    ) public override returns (bytes32) {\\n        bytes32 node = claimForAddr(addr, owner, resolver);\\n        INameSetterResolver(resolver).setName(node, name);\\n        return node;\\n    }\\n\\n    /// @inheritdoc IReverseRegistrar\\n    function setNameForAddrWithSignature(\\n        address addr,\\n        address owner,\\n        address resolver,\\n        uint256 signatureExpiry,\\n        bytes memory signature,\\n        string calldata name\\n    ) public override returns (bytes32) {\\n        bytes32 node = claimForAddrWithSignature(\\n            addr,\\n            owner,\\n            resolver,\\n            signatureExpiry,\\n            signature\\n        );\\n        INameSetterResolver(resolver).setName(node, name);\\n        return node;\\n    }\\n\\n    /// @inheritdoc IReverseRegistrar\\n    function node(address addr) public pure override returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encodePacked(ADDR_REVERSE_NODE, addr.sha3HexAddress())\\n            );\\n    }\\n\\n    /// @dev Checks if the provided address is a contract and is owned by the\\n    ///      caller.\\n    function ownsContract(address addr) internal view returns (bool) {\\n        if (addr.code.length == 0) return false;\\n        try Ownable(addr).owner() returns (address owner) {\\n            return owner == msg.sender;\\n        } catch (bytes memory /* lowLevelData */) {\\n            return false;\\n        }\\n    }\\n\\n    /// @inheritdoc ERC165\\n    function supportsInterface(\\n        bytes4 interfaceID\\n    ) public view override(ERC165) returns (bool) {\\n        return\\n            interfaceID == type(IReverseRegistrar).interfaceId ||\\n            super.supportsInterface(interfaceID);\\n    }\\n}\\n\",\"keccak256\":\"0xf4c618d5bf2d232c5e3afcae378c079b4b491097df3e6496eb93a5ba1c5d9da9\",\"license\":\"MIT\"},\"contracts/reverseRegistrar/SignatureUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport {SignatureChecker} from \\\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\n\\n/// @notice Utility functions for validating signatures with expiry\\nlibrary SignatureUtils {\\n    /// @notice The signature is invalid\\n    error InvalidSignature();\\n    /// @notice The signature expiry is too high\\n    error SignatureExpiryTooHigh();\\n    /// @notice The signature has expired\\n    error SignatureExpired();\\n\\n    /// @notice Validates a signature with expiry\\n    /// @param signature The signature to validate\\n    /// @param addr The address that signed the message\\n    /// @param message The message that was signed\\n    /// @param signatureExpiry The expiry of the signature\\n    function validateSignatureWithExpiry(\\n        bytes memory signature,\\n        address addr,\\n        bytes32 message,\\n        uint256 signatureExpiry\\n    ) internal view {\\n        if (!SignatureChecker.isValidSignatureNow(addr, message, signature))\\n            revert InvalidSignature();\\n        if (signatureExpiry < block.timestamp) revert SignatureExpired();\\n        if (signatureExpiry > block.timestamp + 1 hours)\\n            revert SignatureExpiryTooHigh();\\n    }\\n}\\n\",\"keccak256\":\"0xba80f33df47e87ccdcfe43f67afb793158b42f5db813394643ad66d58abd0093\",\"license\":\"MIT\"},\"contracts/root/Controllable.sol\":{\"content\":\"pragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Controllable is Ownable {\\n    mapping(address => bool) public controllers;\\n\\n    event ControllerChanged(address indexed controller, bool enabled);\\n\\n    modifier onlyController() {\\n        require(\\n            controllers[msg.sender],\\n            \\\"Controllable: Caller is not a controller\\\"\\n        );\\n        _;\\n    }\\n\\n    function setController(address controller, bool enabled) public onlyOwner {\\n        controllers[controller] = enabled;\\n        emit ControllerChanged(controller, enabled);\\n    }\\n}\\n\",\"keccak256\":\"0xb19b8c0fafe9ca2b4bf8aaafee486fa31437672e1e1977bdf84bfe03464969db\"},\"contracts/utils/AddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nlibrary AddressUtils {\\n    // This is the hex encoding of the string 'abcdefghijklmnopqrstuvwxyz'\\n    // It is used as a constant to lookup the characters of the hex address\\n    bytes32 constant lookup =\\n        0x3031323334353637383961626364656600000000000000000000000000000000;\\n\\n    /**\\n     * @dev An optimised function to compute the sha3 of the lower-case\\n     *      hexadecimal representation of an Ethereum address.\\n     * @param addr The address to hash\\n     * @return ret The SHA3 hash of the lower-case hexadecimal encoding of the\\n     *         input address.\\n     */\\n    function sha3HexAddress(address addr) internal pure returns (bytes32 ret) {\\n        assembly {\\n            for {\\n                let i := 40\\n            } gt(i, 0) {\\n\\n            } {\\n                i := sub(i, 1)\\n                mstore8(i, byte(and(addr, 0xf), lookup))\\n                addr := div(addr, 0x10)\\n                i := sub(i, 1)\\n                mstore8(i, byte(and(addr, 0xf), lookup))\\n                addr := div(addr, 0x10)\\n            }\\n\\n            ret := keccak256(0, 40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0e54b564d675e257f9c1e9ae59d2ebec651dcf468865cecd45ea341dcca83ca5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061011b5760003560e01c8063828eab0e116100b2578063c66485b211610081578063e0801e9a11610066578063e0801e9a1461027e578063e0dba60f14610291578063f2fde38b146102a457600080fd5b8063c66485b214610248578063da8c229e1461025b57600080fd5b8063828eab0e146101fe5780638da5cb5b14610211578063bffbe61c14610222578063c47f00271461023557600080fd5b80633f15457f116100ee5780633f15457f1461018f57806365669631146101ce578063715018a6146101e15780637a806d6b146101eb57600080fd5b806301ffc9a7146101205780630f5a5466146101485780631e83409a1461016957806334d671991461017c575b600080fd5b61013361012e36600461102c565b6102b7565b60405190151581526020015b60405180910390f35b61015b61015636600461106b565b610320565b60405190815260200161013f565b61015b6101773660046110a4565b610334565b61015b61018a366004611164565b610350565b6101b67f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161013f565b61015b6101dc3660046111e3565b610574565b6101e96107f3565b005b61015b6101f9366004611270565b610807565b6002546101b6906001600160a01b031681565b6000546001600160a01b03166101b6565b61015b6102303660046110a4565b610848565b61015b6102433660046112ec565b6108ac565b6101e96102563660046110a4565b6108ca565b6101336102693660046110a4565b60016020526000908152604090205460ff1681565b61015b61028c36600461132e565b610969565b6101e961029f3660046113e8565b6109eb565b6101e96102b23660046110a4565b610a52565b60006001600160e01b031982167f6789e32c00000000000000000000000000000000000000000000000000000000148061031a57507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b92915050565b600061032d338484610574565b9392505050565b60025460009061031a90339084906001600160a01b0316610574565b600080610365876001600160a01b0316610ae7565b604080517f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2602082015290810182905290915060009060600160408051601f198184030181529082905280516020918201207f34d67199000000000000000000000000000000000000000000000000000000009183019190915260608a811b6bffffffffffffffffffffffff1990811660248501528a821b8116603885015289821b16604c84015282018790529150600090608001604051602081830303815290604052805190602001209050600061046b827f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c91909152603c902090565b9050610479868b838a610b67565b60405183906001600160a01b038c16907f6ada868dd3058cf77a48a74489fd7963688e5464b2b0fa957ace976243270e9290600090a36040516305ef2c7f60e41b81527f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e26004820152602481018590526001600160a01b038a811660448301528981166064830152600060848301527f00000000000000000000000000000000000000000000000000000000000000001690635ef2c7f09060a401600060405180830381600087803b15801561054e57600080fd5b505af1158015610562573d6000803e3d6000fd5b50949c9b505050505050505050505050565b6000836001600160a01b03811633148015906105a057503360009081526001602052604090205460ff16155b801561065257506040517fe985e9c50000000000000000000000000000000000000000000000000000000081526001600160a01b0382811660048301523360248301527f0000000000000000000000000000000000000000000000000000000000000000169063e985e9c590604401602060405180830381865afa15801561062c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106509190611416565b155b8015610664575061066281610c2d565b155b1561069b576040517fd7a2ae6a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006106af866001600160a01b0316610ae7565b604080517f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e2602080830191909152818301849052825180830384018152606090920192839052815191012091925081906001600160a01b038916907f6ada868dd3058cf77a48a74489fd7963688e5464b2b0fa957ace976243270e9290600090a36040516305ef2c7f60e41b81527f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e26004820152602481018390526001600160a01b0387811660448301528681166064830152600060848301527f00000000000000000000000000000000000000000000000000000000000000001690635ef2c7f09060a4015b600060405180830381600087803b1580156107d057600080fd5b505af11580156107e4573d6000803e3d6000fd5b50929998505050505050505050565b6107fb610cf1565b6108056000610d4b565b565b600080610815878787610574565b604051637737221360e01b81529091506001600160a01b038616906377372213906107b690849088908890600401611433565b60007f91d1777781884d03a6757a803996e38de2a42967fb37eeaca72729271025a9e261087d6001600160a01b038416610ae7565b604080516020810193909352820152606001604051602081830303815290604052805190602001209050919050565b60025460009061032d90339081906001600160a01b03168686610807565b6108d2610cf1565b6001600160a01b038116610912576040517f7ea067a100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517feae17a84d9eb83d8c8eb317f9e7d64857bc363fa51674d996c023f4340c577cf90600090a250565b6000806109798989898989610350565b604051637737221360e01b81529091506001600160a01b038816906377372213906109ac90849088908890600401611433565b600060405180830381600087803b1580156109c657600080fd5b505af11580156109da573d6000803e3d6000fd5b50929b9a5050505050505050505050565b6109f3610cf1565b6001600160a01b038216600081815260016020908152604091829020805460ff191685151590811790915591519182527f4c97694570a07277810af7e5669ffd5f6a2d6b74b6e9a274b8b870fd5114cf87910160405180910390a25050565b610a5a610cf1565b6001600160a01b038116610adb5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b610ae481610d4b565b50565b600060285b8015610b5b57600019017f3031323334353637383961626364656600000000000000000000000000000000600f84161a8153601090920491600019017f3031323334353637383961626364656600000000000000000000000000000000600f84161a8153601083049250610aec565b50506028600020919050565b610b72838386610da8565b610ba8576040517f8baa579f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b42811015610be2576040517f0819bdcd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610bee42610e10611469565b811115610c27576040517f5e4989ee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b6000816001600160a01b03163b600003610c4957506000919050565b816001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610ca3575060408051601f3d908101601f19168201909252610ca09181019061148a565b60015b610ce0573d808015610cd1576040519150601f19603f3d011682016040523d82523d6000602084013e610cd6565b606091505b5060009392505050565b6001600160a01b0316331492915050565b6000546001600160a01b031633146108055760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610ad2565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000806000610db78585610e09565b90925090506000816004811115610dd057610dd06114a7565b148015610dee5750856001600160a01b0316826001600160a01b0316145b80610dff5750610dff868686610e4e565b9695505050505050565b6000808251604103610e3f5760208301516040840151606085015160001a610e3387828585610f68565b94509450505050610e47565b506000905060025b9250929050565b6000806000856001600160a01b0316631626ba7e60e01b8686604051602401610e789291906114e1565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b0319909416939093179092529051610ecb919061151b565b600060405180830381855afa9150503d8060008114610f06576040519150601f19603f3d011682016040523d82523d6000602084013e610f0b565b606091505b5091509150818015610f1f57506020815110155b8015610dff575080517f1626ba7e0000000000000000000000000000000000000000000000000000000090610f5d9083016020908101908401611537565b149695505050505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115610f9f5750600090506003611023565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610ff3573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b03811661101c57600060019250925050611023565b9150600090505b94509492505050565b60006020828403121561103e57600080fd5b81356001600160e01b03198116811461032d57600080fd5b6001600160a01b0381168114610ae457600080fd5b6000806040838503121561107e57600080fd5b823561108981611056565b9150602083013561109981611056565b809150509250929050565b6000602082840312156110b657600080fd5b813561032d81611056565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126110e857600080fd5b813567ffffffffffffffff80821115611103576111036110c1565b604051601f8301601f19908116603f0116810190828211818310171561112b5761112b6110c1565b8160405283815286602085880101111561114457600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080600060a0868803121561117c57600080fd5b853561118781611056565b9450602086013561119781611056565b935060408601356111a781611056565b925060608601359150608086013567ffffffffffffffff8111156111ca57600080fd5b6111d6888289016110d7565b9150509295509295909350565b6000806000606084860312156111f857600080fd5b833561120381611056565b9250602084013561121381611056565b9150604084013561122381611056565b809150509250925092565b60008083601f84011261124057600080fd5b50813567ffffffffffffffff81111561125857600080fd5b602083019150836020828501011115610e4757600080fd5b60008060008060006080868803121561128857600080fd5b853561129381611056565b945060208601356112a381611056565b935060408601356112b381611056565b9250606086013567ffffffffffffffff8111156112cf57600080fd5b6112db8882890161122e565b969995985093965092949392505050565b600080602083850312156112ff57600080fd5b823567ffffffffffffffff81111561131657600080fd5b6113228582860161122e565b90969095509350505050565b600080600080600080600060c0888a03121561134957600080fd5b873561135481611056565b9650602088013561136481611056565b9550604088013561137481611056565b945060608801359350608088013567ffffffffffffffff8082111561139857600080fd5b6113a48b838c016110d7565b945060a08a01359150808211156113ba57600080fd5b506113c78a828b0161122e565b989b979a50959850939692959293505050565b8015158114610ae457600080fd5b600080604083850312156113fb57600080fd5b823561140681611056565b91506020830135611099816113da565b60006020828403121561142857600080fd5b815161032d816113da565b83815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b8082018082111561031a57634e487b7160e01b600052601160045260246000fd5b60006020828403121561149c57600080fd5b815161032d81611056565b634e487b7160e01b600052602160045260246000fd5b60005b838110156114d85781810151838201526020016114c0565b50506000910152565b82815260406020820152600082518060408401526115068160608501602087016114bd565b601f01601f1916919091016060019392505050565b6000825161152d8184602087016114bd565b9190910192915050565b60006020828403121561154957600080fd5b505191905056fea2646970667358221220aa39c2af36a6fb912271f06a3290824779a31f48df3ec8792458ac5bd9dfba9b64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "claim(address)": {
        "params": {
          "owner": "The address to set as the owner of the reverse record in ENS."
        },
        "returns": {
          "_0": "The ENS node hash of the reverse record"
        }
      },
      "claimForAddr(address,address,address)": {
        "params": {
          "addr": "The address to claim the reverse record for",
          "owner": "The address to set as the owner of the reverse record",
          "resolver": "The resolver of the reverse node"
        },
        "returns": {
          "_0": "The ENS node hash of the reverse record"
        }
      },
      "claimForAddrWithSignature(address,address,address,uint256,bytes)": {
        "params": {
          "addr": "The address to claim the reverse record for",
          "owner": "The address to set as the owner of the reverse record",
          "resolver": "The resolver of the reverse node",
          "signature": "The signature to authorise the claim",
          "signatureExpiry": "The expiry of the signature"
        },
        "returns": {
          "_0": "The ENS node hash of the reverse record"
        }
      },
      "claimWithResolver(address,address)": {
        "params": {
          "owner": "The address to set as the owner of the reverse record",
          "resolver": "The resolver of the reverse node"
        },
        "returns": {
          "_0": "The ENS node hash of the reverse record"
        }
      },
      "constructor": {
        "params": {
          "ensAddr": "The address of the ENS registry"
        }
      },
      "node(address)": {
        "params": {
          "addr": "The address to get the reverse node hash for"
        },
        "returns": {
          "_0": "The ENS node hash"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setDefaultResolver(address)": {
        "params": {
          "resolver": "The resolver to set"
        }
      },
      "setName(string)": {
        "params": {
          "name": "The name to set for the calling account"
        },
        "returns": {
          "_0": "The ENS node hash of the reverse record"
        }
      },
      "setNameForAddr(address,address,address,string)": {
        "params": {
          "addr": "The reverse record to set",
          "name": "The name to set for the provided address",
          "owner": "The owner of the reverse node",
          "resolver": "The resolver of the reverse node"
        },
        "returns": {
          "_0": "The ENS node hash of the reverse record"
        }
      },
      "setNameForAddrWithSignature(address,address,address,uint256,bytes,string)": {
        "params": {
          "addr": "The reverse record to set",
          "name": "The name to set for the provided address",
          "owner": "The owner of the reverse node",
          "resolver": "The resolver of the reverse node",
          "signature": "The signature to authorise the claim",
          "signatureExpiry": "The expiry of the signature"
        },
        "returns": {
          "_0": "The ENS node hash of the reverse record"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "ADDR_REVERSE_NODE": {
        "details": "`namehash('addr.reverse')`"
      }
    },
    "title": "ENS Reverse Registrar",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "InvalidSignature()": [
        {
          "notice": "The signature is invalid"
        }
      ],
      "ResolverAddressZero()": [
        {
          "notice": "Thrown when the resolver address is zero"
        }
      ],
      "SignatureExpired()": [
        {
          "notice": "The signature has expired"
        }
      ],
      "SignatureExpiryTooHigh()": [
        {
          "notice": "The signature expiry is too high"
        }
      ],
      "Unauthorised()": [
        {
          "notice": "Thrown when the caller is not authorised to perform the action"
        }
      ]
    },
    "events": {
      "DefaultResolverChanged(address)": {
        "notice": "Emitted when the default resolver is changed."
      },
      "ReverseClaimed(address,bytes32)": {
        "notice": "Emitted when a reverse record is claimed."
      }
    },
    "kind": "user",
    "methods": {
      "claim(address)": {
        "notice": "Transfers ownership of the reverse ENS record associated with the         calling account."
      },
      "claimForAddr(address,address,address)": {
        "notice": "Transfers ownership of the reverse ENS record associated with the         addr provided account."
      },
      "claimForAddrWithSignature(address,address,address,uint256,bytes)": {
        "notice": "Transfers ownership of the reverse ENS record associated with the         addr provided account using a signature to authorise."
      },
      "claimWithResolver(address,address)": {
        "notice": "Transfers ownership of the reverse ENS record associated with the         calling account."
      },
      "constructor": {
        "notice": "Sets the ENS registry and claims `addr.reverse`"
      },
      "defaultResolver()": {
        "notice": "The default resolver"
      },
      "ens()": {
        "notice": "The ENS registry"
      },
      "node(address)": {
        "notice": "Returns the ENS node hash for the reverse record associated with         the addr provided account."
      },
      "setDefaultResolver(address)": {
        "notice": "Sets the default resolver"
      },
      "setName(string)": {
        "notice": "Sets the `name()` record for the reverse ENS record associated         with the calling account, and updates the resolver to the         default reverse resolver."
      },
      "setNameForAddr(address,address,address,string)": {
        "notice": "Sets the `name()` record for the reverse ENS record associated         with the addr provided account, and updates the resolver to the         resolver provided."
      },
      "setNameForAddrWithSignature(address,address,address,uint256,bytes,string)": {
        "notice": "Sets the `name()` record for the reverse ENS record associated         with the addr provided account using a signature to authorise,         and updates the resolver to the resolver provided."
      }
    },
    "notice": "The registrar for reverse records on ENS",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 428,
        "contract": "contracts/reverseRegistrar/ReverseRegistrar.sol:ReverseRegistrar",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 10832,
        "contract": "contracts/reverseRegistrar/ReverseRegistrar.sol:ReverseRegistrar",
        "label": "controllers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 10086,
        "contract": "contracts/reverseRegistrar/ReverseRegistrar.sol:ReverseRegistrar",
        "label": "defaultResolver",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(INameSetterResolver)10056"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(INameSetterResolver)10056": {
        "encoding": "inplace",
        "label": "contract INameSetterResolver",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}