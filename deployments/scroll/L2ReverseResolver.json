{
  "address": "0x0d3b4af7f0f89c67163e5a301ba1b37a16c968f1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_L2ReverseNode",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_coinType",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidSignature",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotOwnerOfContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SignatureExpired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SignatureExpiryTooHigh",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorised",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "NameChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "ReverseClaimed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "L2ReverseNode",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "coinType",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "nodehash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicallWithNodeCheck",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "node",
          "type": "bytes32"
        }
      ],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "node",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "parentNode",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "setName",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "setNameForAddr",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "signatureExpiry",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "setNameForAddrWithSignature",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "signatureExpiry",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        }
      ],
      "name": "setNameForAddrWithSignatureAndOwnable",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x57540d18e6f553fd00715445805e779b31cdec7f2c3fe75d0f4dd1667ddc07c4",
  "receipt": {
    "to": null,
    "from": "0x69420f05a11f617b4b74ffe2e04b2d300dfa556f",
    "contractAddress": "0x0d3b4af7f0f89c67163e5a301ba1b37a16c968f1",
    "transactionIndex": "0x0",
    "gasUsed": "0x13666b",
    "logsBloom": "0x
    "blockHash": "0x94c169b16c0ecfb10f25a654d219d093af6483309ea51ba6d749ce04906e09f9",
    "transactionHash": "0xe3829070c276c113b5de2491459a34ba4c04887ff4244812838a92d6c732d781",
    "logs": [],
    "blockNumber": "0x8bb57a",
    "cumulativeGasUsed": "0x13666b",
    "status": "0x1"
  },
  "args": [
    "0xfabc979031651c03d1b568e0d88c15a21ecf724abea98b406c114ef895378217",
    2148018000
  ],
  "numDeployments": 2,
  "solcInputHash": "bb183f1f4be3ea9e1920eec46238927c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_L2ReverseNode\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_coinType\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwnerOfContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignatureExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignatureExpiryTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorised\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"NameChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"ReverseClaimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"L2ReverseNode\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coinType\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"nodehash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicallWithNodeCheck\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"}],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"node\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"parentNode\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"setNameForAddr\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"signatureExpiry\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"setNameForAddrWithSignature\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"signatureExpiry\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"setNameForAddrWithSignatureAndOwnable\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"name(bytes32)\":{\"params\":{\"node\":\"The ENS node to query.\"},\"returns\":{\"_0\":\"The associated name.\"}},\"node(address)\":{\"details\":\"Returns the node hash for a given account's reverse records.\",\"params\":{\"addr\":\"The address to hash\"},\"returns\":{\"_0\":\"The ENS node hash.\"}},\"setName(string)\":{\"details\":\"Sets the `name()` record for the reverse ENS record associated with the calling account.\",\"params\":{\"name\":\"The name to set for this address.\"},\"returns\":{\"_0\":\"The ENS node hash of the reverse record.\"}},\"setNameForAddr(address,string)\":{\"details\":\"Sets the `name()` record for the reverse ENS record associated with the addr provided account. Can be used if the addr is a contract that is owned by a SCW.\",\"params\":{\"name\":\"The name to set for this address.\"},\"returns\":{\"_0\":\"The ENS node hash of the reverse record.\"}},\"setNameForAddrWithSignature(address,string,uint256,bytes)\":{\"details\":\"Sets the name for an addr using a signature that can be verified with ERC1271.\",\"params\":{\"addr\":\"The reverse record to set\",\"name\":\"The name of the reverse record\",\"signature\":\"The resolver of the reverse node\",\"signatureExpiry\":\"Date when the signature expires\"},\"returns\":{\"_0\":\"The ENS node hash of the reverse record.\"}},\"setNameForAddrWithSignatureAndOwnable(address,address,string,uint256,bytes)\":{\"details\":\"Sets the name for a contract that is owned by a SCW using a signature\",\"params\":{\"contractAddr\":\"The reverse node to set\",\"name\":\"The name of the reverse record\",\"owner\":\"The owner of the contract (via Ownable)\",\"signature\":\"The signature of an address that will return true on isValidSignature for the owner\",\"signatureExpiry\":\"Date when the signature expires\"},\"returns\":{\"_0\":\"The ENS node hash of the reverse record.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"name(bytes32)\":{\"notice\":\"Returns the name associated with an ENS node, for reverse records. Defined in EIP181.\"}},\"notice\":\"A L2 reverse resolver. Deployed to each L2 chain.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/reverseRegistrar/L2ReverseResolver.sol\":\"L2ReverseResolver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Gnosis Safe.\\n *\\n * _Available since v4.1._\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(address signer, bytes32 hash, bytes memory signature) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(hash, signature);\\n        return\\n            (error == ECDSA.RecoverError.NoError && recovered == signer) ||\\n            isValidERC1271SignatureNow(signer, hash, signature);\\n    }\\n\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. The signature is validated\\n     * against the signer smart contract using ERC1271.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidERC1271SignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, hash, signature)\\n        );\\n        return (success &&\\n            result.length >= 32 &&\\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\\n    }\\n}\\n\",\"keccak256\":\"0x3af3ca86df39aac39a0514c84459d691434a108d2151c8ce9d69f32e315cab80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/registry/ENS.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface ENS {\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed node, address owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed node, address resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n    // Logged when an operator is added or removed.\\n    event ApprovalForAll(\\n        address indexed owner,\\n        address indexed operator,\\n        bool approved\\n    );\\n\\n    function setRecord(\\n        bytes32 node,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeRecord(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner,\\n        address resolver,\\n        uint64 ttl\\n    ) external;\\n\\n    function setSubnodeOwner(\\n        bytes32 node,\\n        bytes32 label,\\n        address owner\\n    ) external returns (bytes32);\\n\\n    function setResolver(bytes32 node, address resolver) external;\\n\\n    function setOwner(bytes32 node, address owner) external;\\n\\n    function setTTL(bytes32 node, uint64 ttl) external;\\n\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    function owner(bytes32 node) external view returns (address);\\n\\n    function resolver(bytes32 node) external view returns (address);\\n\\n    function ttl(bytes32 node) external view returns (uint64);\\n\\n    function recordExists(bytes32 node) external view returns (bool);\\n\\n    function isApprovedForAll(\\n        address owner,\\n        address operator\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8e208b44d5dbf22552fe72d79b45c640855b84fbc9ee21f4c3bb4bfe81cbe8db\",\"license\":\"MIT\"},\"contracts/resolvers/IMulticallable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IMulticallable {\\n    function multicall(\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results);\\n\\n    function multicallWithNodeCheck(\\n        bytes32,\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results);\\n}\\n\",\"keccak256\":\"0x0334202e20bb11995997083d05963f5e8e7ed6194cba494e7f9371ab7bf4e2c3\",\"license\":\"MIT\"},\"contracts/resolvers/Multicallable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IMulticallable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nabstract contract Multicallable is IMulticallable, ERC165 {\\n    function _multicall(\\n        bytes32 nodehash,\\n        bytes[] calldata data\\n    ) internal returns (bytes[] memory results) {\\n        results = new bytes[](data.length);\\n        for (uint256 i = 0; i < data.length; i++) {\\n            if (nodehash != bytes32(0)) {\\n                bytes32 txNamehash = bytes32(data[i][4:36]);\\n                require(\\n                    txNamehash == nodehash,\\n                    \\\"multicall: All records must have a matching namehash\\\"\\n                );\\n            }\\n            (bool success, bytes memory result) = address(this).delegatecall(\\n                data[i]\\n            );\\n            require(success);\\n            results[i] = result;\\n        }\\n        return results;\\n    }\\n\\n    // This function provides an extra security check when called\\n    // from priviledged contracts (such as EthRegistrarController)\\n    // that can set records on behalf of the node owners\\n    function multicallWithNodeCheck(\\n        bytes32 nodehash,\\n        bytes[] calldata data\\n    ) external returns (bytes[] memory results) {\\n        return _multicall(nodehash, data);\\n    }\\n\\n    function multicall(\\n        bytes[] calldata data\\n    ) public override returns (bytes[] memory results) {\\n        return _multicall(bytes32(0), data);\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceID\\n    ) public view virtual override returns (bool) {\\n        return\\n            interfaceID == type(IMulticallable).interfaceId ||\\n            super.supportsInterface(interfaceID);\\n    }\\n}\\n\",\"keccak256\":\"0x1063a9dd3b94ba304624d5ec6deb43c1916640758ae970eece4d4e3ef8b2fcb1\",\"license\":\"MIT\"},\"contracts/resolvers/profiles/INameResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.4;\\n\\ninterface INameResolver {\\n    event NameChanged(bytes32 indexed node, string name);\\n\\n    /**\\n     * Returns the name associated with an ENS node, for reverse records.\\n     * Defined in EIP181.\\n     * @param node The ENS node to query.\\n     * @return The associated name.\\n     */\\n    function name(bytes32 node) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x9ec392b612447b1acbdc01114f2da2837a658d3f3157f60a99c5269f0b623346\",\"license\":\"MIT\"},\"contracts/reverseRegistrar/IL2ReverseResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\ninterface IL2ReverseResolver {\\n    function setName(string memory name) external returns (bytes32);\\n\\n    function setNameForAddr(\\n        address addr,\\n        string memory name\\n    ) external returns (bytes32);\\n\\n    function setNameForAddrWithSignatureAndOwnable(\\n        address contractAddr,\\n        address owner,\\n        string memory name,\\n        uint256 inceptionDate,\\n        bytes memory signature\\n    ) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0x7eac8eeb1ae527047963e2da3b522f50ef40a7a25da151b0762d78b7714e3382\",\"license\":\"MIT\"},\"contracts/reverseRegistrar/ISignatureReverseResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\ninterface ISignatureReverseResolver {\\n    event ReverseClaimed(address indexed addr, bytes32 indexed node);\\n    event NameChanged(bytes32 indexed node, string name);\\n\\n    function setNameForAddrWithSignature(\\n        address addr,\\n        string memory name,\\n        uint256 inceptionDate,\\n        bytes memory signature\\n    ) external returns (bytes32);\\n\\n    function name(bytes32 node) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xf59f4ddcc04c31d48eb2d11881d031ceef2fcc7de24bc3f602bd9332ab0aef07\",\"license\":\"MIT\"},\"contracts/reverseRegistrar/L2ReverseResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nimport {ENS} from \\\"../registry/ENS.sol\\\";\\nimport {INameResolver} from \\\"../resolvers/profiles/INameResolver.sol\\\";\\nimport {Multicallable} from \\\"../resolvers/Multicallable.sol\\\";\\n\\nimport {IL2ReverseResolver} from \\\"./IL2ReverseResolver.sol\\\";\\nimport {SignatureReverseResolver, Unauthorised} from \\\"./SignatureReverseResolver.sol\\\";\\nimport {SignatureUtils} from \\\"./SignatureUtils.sol\\\";\\n\\nerror NotOwnerOfContract();\\n\\n/**\\n * A L2 reverse resolver. Deployed to each L2 chain.\\n */\\ncontract L2ReverseResolver is\\n    ERC165,\\n    Multicallable,\\n    IL2ReverseResolver,\\n    SignatureReverseResolver\\n{\\n    using SignatureUtils for bytes;\\n    using ECDSA for bytes32;\\n\\n    bytes32 public immutable L2ReverseNode;\\n\\n    /*\\n     * @dev Constructor\\n     * @param _L2ReverseNode The namespace to set. The converntion is '${coinType}.reverse'\\n     * @param _coinType The cointype converted from the chainId of the chain this contract is deployed to.\\n     */\\n    constructor(\\n        bytes32 _L2ReverseNode,\\n        uint256 _coinType\\n    ) SignatureReverseResolver(_L2ReverseNode, _coinType) {\\n        L2ReverseNode = _L2ReverseNode;\\n    }\\n\\n    function isAuthorised(address addr) internal view override {\\n        if (addr != msg.sender && !ownsContract(addr, msg.sender)) {\\n            revert Unauthorised();\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the name for a contract that is owned by a SCW using a signature\\n     * @param contractAddr The reverse node to set\\n     * @param owner The owner of the contract (via Ownable)\\n     * @param name The name of the reverse record\\n     * @param signatureExpiry Date when the signature expires\\n     * @param signature The signature of an address that will return true on isValidSignature for the owner\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function setNameForAddrWithSignatureAndOwnable(\\n        address contractAddr,\\n        address owner,\\n        string calldata name,\\n        uint256 signatureExpiry,\\n        bytes memory signature\\n    ) public returns (bytes32) {\\n        bytes32 node = _getNamehash(contractAddr);\\n\\n        // Follow ERC191 version 0 https://eips.ethereum.org/EIPS/eip-191\\n        bytes32 message = keccak256(\\n            abi.encodePacked(\\n                address(this),\\n                IL2ReverseResolver\\n                    .setNameForAddrWithSignatureAndOwnable\\n                    .selector,\\n                name,\\n                contractAddr,\\n                owner,\\n                signatureExpiry,\\n                coinType\\n            )\\n        ).toEthSignedMessageHash();\\n\\n        if (!ownsContract(contractAddr, owner)) {\\n            revert NotOwnerOfContract();\\n        }\\n\\n        signature.validateSignatureWithExpiry(owner, message, signatureExpiry);\\n\\n        _setName(node, name);\\n        emit ReverseClaimed(contractAddr, node);\\n\\n        return node;\\n    }\\n\\n    /**\\n     * @dev Sets the `name()` record for the reverse ENS record associated with\\n     * the calling account.\\n     * @param name The name to set for this address.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function setName(string calldata name) public override returns (bytes32) {\\n        return setNameForAddr(msg.sender, name);\\n    }\\n\\n    /**\\n     * @dev Sets the `name()` record for the reverse ENS record associated with\\n     * the addr provided account.\\n     * Can be used if the addr is a contract that is owned by a SCW.\\n     * @param name The name to set for this address.\\n     * @return The ENS node hash of the reverse record.\\n     */\\n\\n    function setNameForAddr(\\n        address addr,\\n        string calldata name\\n    ) public authorised(addr) returns (bytes32) {\\n        bytes32 node = _getNamehash(addr);\\n\\n        _setName(node, name);\\n        emit ReverseClaimed(addr, node);\\n\\n        return node;\\n    }\\n\\n    function ownsContract(\\n        address contractAddr,\\n        address addr\\n    ) internal view returns (bool) {\\n        try Ownable(contractAddr).owner() returns (address owner) {\\n            return owner == addr;\\n        } catch {\\n            return false;\\n        }\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceID\\n    )\\n        public\\n        view\\n        override(ERC165, Multicallable, SignatureReverseResolver)\\n        returns (bool)\\n    {\\n        return\\n            interfaceID == type(IL2ReverseResolver).interfaceId ||\\n            super.supportsInterface(interfaceID);\\n    }\\n}\\n\",\"keccak256\":\"0xf5bba88d468a7ebb82c005f555948813d635cc987d47c0f5a9852172e168f6ae\",\"license\":\"MIT\"},\"contracts/reverseRegistrar/SignatureReverseResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nimport {ENS} from \\\"../registry/ENS.sol\\\";\\nimport {AddressUtils} from \\\"../utils/AddressUtils.sol\\\";\\n\\nimport {ISignatureReverseResolver} from \\\"./ISignatureReverseResolver.sol\\\";\\nimport {SignatureUtils} from \\\"./SignatureUtils.sol\\\";\\n\\nerror Unauthorised();\\n\\ncontract SignatureReverseResolver is ISignatureReverseResolver, ERC165 {\\n    using SignatureUtils for bytes;\\n    using ECDSA for bytes32;\\n    using AddressUtils for address;\\n\\n    mapping(bytes32 => string) names;\\n\\n    bytes32 public immutable parentNode;\\n    uint256 public immutable coinType;\\n\\n    /*\\n     * @dev Constructor\\n     * @param parentNode The namespace to set.\\n     * @param _coinType The coinType converted from the chainId of the chain this contract is deployed to.\\n     */\\n    constructor(bytes32 _parentNode, uint256 _coinType) {\\n        parentNode = _parentNode;\\n        coinType = _coinType;\\n    }\\n\\n    modifier authorised(address addr) {\\n        isAuthorised(addr);\\n        _;\\n    }\\n\\n    function isAuthorised(address addr) internal view virtual {}\\n\\n    /**\\n     * @dev Sets the name for an addr using a signature that can be verified with ERC1271.\\n     * @param addr The reverse record to set\\n     * @param name The name of the reverse record\\n     * @param signatureExpiry Date when the signature expires\\n     * @param signature The resolver of the reverse node\\n     * @return The ENS node hash of the reverse record.\\n     */\\n    function setNameForAddrWithSignature(\\n        address addr,\\n        string calldata name,\\n        uint256 signatureExpiry,\\n        bytes memory signature\\n    ) public returns (bytes32) {\\n        bytes32 node = _getNamehash(addr);\\n\\n        // Follow ERC191 version 0 https://eips.ethereum.org/EIPS/eip-191\\n        bytes32 message = keccak256(\\n            abi.encodePacked(\\n                address(this),\\n                ISignatureReverseResolver.setNameForAddrWithSignature.selector,\\n                name,\\n                addr,\\n                signatureExpiry,\\n                coinType\\n            )\\n        ).toEthSignedMessageHash();\\n\\n        signature.validateSignatureWithExpiry(addr, message, signatureExpiry);\\n\\n        _setName(node, name);\\n        emit ReverseClaimed(addr, node);\\n        return node;\\n    }\\n\\n    function _setName(bytes32 node, string calldata newName) internal virtual {\\n        names[node] = newName;\\n        emit NameChanged(node, newName);\\n    }\\n\\n    /**\\n     * Returns the name associated with an ENS node, for reverse records.\\n     * Defined in EIP181.\\n     * @param node The ENS node to query.\\n     * @return The associated name.\\n     */\\n    function name(bytes32 node) public view returns (string memory) {\\n        return names[node];\\n    }\\n\\n    /**\\n     * @dev Returns the node hash for a given account's reverse records.\\n     * @param addr The address to hash\\n     * @return The ENS node hash.\\n     */\\n    function node(address addr) public view returns (bytes32) {\\n        return _getNamehash(addr);\\n    }\\n\\n    function _getNamehash(address addr) internal view returns (bytes32) {\\n        return keccak256(abi.encodePacked(parentNode, addr.sha3HexAddress()));\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceID\\n    ) public view virtual override returns (bool) {\\n        return\\n            interfaceID == type(ISignatureReverseResolver).interfaceId ||\\n            super.supportsInterface(interfaceID);\\n    }\\n}\\n\",\"keccak256\":\"0xb480c67cfdf0bb2c376c7ac201401d7c32f782d182327ac00fb0a3828d3a8887\",\"license\":\"MIT\"},\"contracts/reverseRegistrar/SignatureUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport {SignatureChecker} from \\\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\n\\nerror InvalidSignature();\\nerror SignatureExpiryTooHigh();\\nerror SignatureExpired();\\n\\nlibrary SignatureUtils {\\n    function validateSignatureWithExpiry(\\n        bytes memory signature,\\n        address addr,\\n        bytes32 message,\\n        uint256 signatureExpiry\\n    ) internal view {\\n        if (!SignatureChecker.isValidSignatureNow(addr, message, signature))\\n            revert InvalidSignature();\\n        if (signatureExpiry < block.timestamp) revert SignatureExpired();\\n        if (signatureExpiry > block.timestamp + 1 hours)\\n            revert SignatureExpiryTooHigh();\\n    }\\n}\\n\",\"keccak256\":\"0x1b878e9bcf0b7c9a99b0482d1e1093da6513e3848099f8944ce26bb95d55d9ec\",\"license\":\"MIT\"},\"contracts/utils/AddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.13;\\n\\nlibrary AddressUtils {\\n    // This is the hex encoding of the string 'abcdefghijklmnopqrstuvwxyz'\\n    // It is used as a constant to lookup the characters of the hex address\\n    bytes32 constant lookup =\\n        0x3031323334353637383961626364656600000000000000000000000000000000;\\n\\n    /**\\n     * @dev An optimised function to compute the sha3 of the lower-case\\n     *      hexadecimal representation of an Ethereum address.\\n     * @param addr The address to hash\\n     * @return ret The SHA3 hash of the lower-case hexadecimal encoding of the\\n     *         input address.\\n     */\\n    function sha3HexAddress(address addr) internal pure returns (bytes32 ret) {\\n        assembly {\\n            for {\\n                let i := 40\\n            } gt(i, 0) {\\n\\n            } {\\n                i := sub(i, 1)\\n                mstore8(i, byte(and(addr, 0xf), lookup))\\n                addr := div(addr, 0x10)\\n                i := sub(i, 1)\\n                mstore8(i, byte(and(addr, 0xf), lookup))\\n                addr := div(addr, 0x10)\\n            }\\n\\n            ret := keccak256(0, 40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0e54b564d675e257f9c1e9ae59d2ebec651dcf468865cecd45ea341dcca83ca5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e060405234801561001057600080fd5b506040516116c03803806116c083398101604081905261002f9161003f565b608082905260a05260c052610063565b6000806040838503121561005257600080fd5b505080516020909101519092909150565b60805160a05160c0516116196100a760003960006101810152600081816101270152818161029d015261047b01526000818161021401526105ef01526116196000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c8063ac9650d811610081578063c91199411161005b578063c9119941146101e9578063e32954eb146101fc578063f3068a001461020f57600080fd5b8063ac9650d8146101a3578063bffbe61c146101c3578063c47f0027146101d657600080fd5b8063691f3431116100b2578063691f3431146101495780637f87032e1461016957806380d8db3d1461017c57600080fd5b806301ffc9a7146100d95780630affd653146101015780631fe93ea814610122575b600080fd5b6100ec6100e7366004610da7565b610236565b60405190151581526020015b60405180910390f35b61011461010f366004610ecb565b61027a565b6040519081526020016100f8565b6101147f000000000000000000000000000000000000000000000000000000000000000081565b61015c610157366004610f62565b6103b7565b6040516100f89190610fcb565b610114610177366004610fde565b610459565b6101147f000000000000000000000000000000000000000000000000000000000000000081565b6101b66101b13660046110a9565b61050a565b6040516100f891906110eb565b6101146101d136600461114d565b61051f565b6101146101e436600461116a565b61052a565b6101146101f73660046111a0565b610533565b6101b661020a3660046111f5565b610598565b6101147f000000000000000000000000000000000000000000000000000000000000000081565b60006001600160e01b031982167f07914f350000000000000000000000000000000000000000000000000000000014806102745750610274826105ad565b92915050565b600080610286886105eb565b9050600061031c30630affd65360e01b89898d8d8b7f00000000000000000000000000000000000000000000000000000000000000006040516020016102d3989796959493929190611234565b604051602081830303815290604052805190602001207f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c91909152603c902090565b9050610328898961064f565b61035e576040517f4570a02400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61036a848983886106d4565b61037582888861079a565b60405182906001600160a01b038b16907f6ada868dd3058cf77a48a74489fd7963688e5464b2b0fa957ace976243270e9290600090a350979650505050505050565b60008181526020819052604090208054606091906103d490611295565b80601f016020809104026020016040519081016040528092919081815260200182805461040090611295565b801561044d5780601f106104225761010080835404028352916020019161044d565b820191906000526020600020905b81548152906001019060200180831161043057829003601f168201915b50505050509050919050565b600080610465876105eb565b905060006104b030637f87032e60e01b89898c8a7f00000000000000000000000000000000000000000000000000000000000000006040516020016102d397969594939291906112cf565b90506104be848983886106d4565b6104c982888861079a565b60405182906001600160a01b038a16907f6ada868dd3058cf77a48a74489fd7963688e5464b2b0fa957ace976243270e9290600090a3509695505050505050565b6060610518600084846107f3565b9392505050565b6000610274826105eb565b60006105183384845b60008361053f816109e2565b600061054a866105eb565b905061055781868661079a565b60405181906001600160a01b038816907f6ada868dd3058cf77a48a74489fd7963688e5464b2b0fa957ace976243270e9290600090a391505b509392505050565b60606105a58484846107f3565b949350505050565b60006001600160e01b031982167f1698371f000000000000000000000000000000000000000000000000000000001480610274575061027482610a3c565b60007f0000000000000000000000000000000000000000000000000000000000000000610620836001600160a01b0316610aa3565b604080516020810193909352820152606001604051602081830303815290604052805190602001209050919050565b6000826001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156106ab575060408051601f3d908101601f191682019092526106a89181019061132c565b60015b6106b757506000610274565b826001600160a01b0316816001600160a01b031614915050610274565b6106df838386610b23565b610715576040517f8baa579f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b4281101561074f576040517f0819bdcd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61075b42610e1061135f565b811115610794576040517f5e4989ee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b60008381526020819052604090206107b38284836113c1565b50827fb7d29e911041e8d9b843369e890bcb72c9388692ba48b65ac54e7214c4c348f783836040516107e6929190611482565b60405180910390a2505050565b60608167ffffffffffffffff81111561080e5761080e610e28565b60405190808252806020026020018201604052801561084157816020015b606081526020019060019003908161082c5790505b50905060005b8281101561059057841561092a576000848483818110610869576108696114b1565b905060200281019061087b91906114c7565b61088a9160249160049161150e565b61089391611538565b9050858114610928576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603460248201527f6d756c746963616c6c3a20416c6c207265636f726473206d757374206861766560448201527f2061206d61746368696e67206e616d6568617368000000000000000000000000606482015260840160405180910390fd5b505b60008030868685818110610940576109406114b1565b905060200281019061095291906114c7565b604051610960929190611556565b600060405180830381855af49150503d806000811461099b576040519150601f19603f3d011682016040523d82523d6000602084013e6109a0565b606091505b5091509150816109af57600080fd5b808484815181106109c2576109c26114b1565b6020026020010181905250505080806109da90611566565b915050610847565b6001600160a01b0381163314801590610a025750610a00813361064f565b155b15610a39576040517fd7a2ae6a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b60006001600160e01b031982167f4fbf043300000000000000000000000000000000000000000000000000000000148061027457507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b0319831614610274565b600060285b8015610b1757600019017f3031323334353637383961626364656600000000000000000000000000000000600f84161a8153601090920491600019017f3031323334353637383961626364656600000000000000000000000000000000600f84161a8153601083049250610aa8565b50506028600020919050565b6000806000610b328585610b84565b90925090506000816004811115610b4b57610b4b61157f565b148015610b695750856001600160a01b0316826001600160a01b0316145b80610b7a5750610b7a868686610bc9565b9695505050505050565b6000808251604103610bba5760208301516040840151606085015160001a610bae87828585610ce3565b94509450505050610bc2565b506000905060025b9250929050565b6000806000856001600160a01b0316631626ba7e60e01b8686604051602401610bf3929190611595565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b0319909416939093179092529051610c4691906115ae565b600060405180830381855afa9150503d8060008114610c81576040519150601f19603f3d011682016040523d82523d6000602084013e610c86565b606091505b5091509150818015610c9a57506020815110155b8015610b7a575080517f1626ba7e0000000000000000000000000000000000000000000000000000000090610cd890830160209081019084016115ca565b149695505050505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115610d1a5750600090506003610d9e565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610d6e573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610d9757600060019250925050610d9e565b9150600090505b94509492505050565b600060208284031215610db957600080fd5b81356001600160e01b03198116811461051857600080fd5b6001600160a01b0381168114610a3957600080fd5b60008083601f840112610df857600080fd5b50813567ffffffffffffffff811115610e1057600080fd5b602083019150836020828501011115610bc257600080fd5b634e487b7160e01b600052604160045260246000fd5b600082601f830112610e4f57600080fd5b813567ffffffffffffffff80821115610e6a57610e6a610e28565b604051601f8301601f19908116603f01168101908282118183101715610e9257610e92610e28565b81604052838152866020858801011115610eab57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060008060a08789031215610ee457600080fd5b8635610eef81610dd1565b95506020870135610eff81610dd1565b9450604087013567ffffffffffffffff80821115610f1c57600080fd5b610f288a838b01610de6565b9096509450606089013593506080890135915080821115610f4857600080fd5b50610f5589828a01610e3e565b9150509295509295509295565b600060208284031215610f7457600080fd5b5035919050565b60005b83811015610f96578181015183820152602001610f7e565b50506000910152565b60008151808452610fb7816020860160208601610f7b565b601f01601f19169290920160200192915050565b6020815260006105186020830184610f9f565b600080600080600060808688031215610ff657600080fd5b853561100181610dd1565b9450602086013567ffffffffffffffff8082111561101e57600080fd5b61102a89838a01610de6565b909650945060408801359350606088013591508082111561104a57600080fd5b5061105788828901610e3e565b9150509295509295909350565b60008083601f84011261107657600080fd5b50813567ffffffffffffffff81111561108e57600080fd5b6020830191508360208260051b8501011115610bc257600080fd5b600080602083850312156110bc57600080fd5b823567ffffffffffffffff8111156110d357600080fd5b6110df85828601611064565b90969095509350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561114057603f1988860301845261112e858351610f9f565b94509285019290850190600101611112565b5092979650505050505050565b60006020828403121561115f57600080fd5b813561051881610dd1565b6000806020838503121561117d57600080fd5b823567ffffffffffffffff81111561119457600080fd5b6110df85828601610de6565b6000806000604084860312156111b557600080fd5b83356111c081610dd1565b9250602084013567ffffffffffffffff8111156111dc57600080fd5b6111e886828701610de6565b9497909650939450505050565b60008060006040848603121561120a57600080fd5b83359250602084013567ffffffffffffffff81111561122857600080fd5b6111e886828701611064565b60006bffffffffffffffffffffffff19808b60601b1683526001600160e01b03198a16601484015287896018850137606096871b81169790920160188101979097525092841b909216602c8501526040840152908201526080019392505050565b600181811c908216806112a957607f821691505b6020821081036112c957634e487b7160e01b600052602260045260246000fd5b50919050565b60006bffffffffffffffffffffffff19808a60601b1683526001600160e01b03198916601484015286886018850137868301818760601b16601882015285602c82015284604c820152606c81019250505098975050505050505050565b60006020828403121561133e57600080fd5b815161051881610dd1565b634e487b7160e01b600052601160045260246000fd5b8082018082111561027457610274611349565b601f8211156113bc57600081815260208120601f850160051c810160208610156113995750805b601f850160051c820191505b818110156113b8578281556001016113a5565b5050505b505050565b67ffffffffffffffff8311156113d9576113d9610e28565b6113ed836113e78354611295565b83611372565b6000601f84116001811461142157600085156114095750838201355b600019600387901b1c1916600186901b17835561147b565b600083815260209020601f19861690835b828110156114525786850135825560209485019460019092019101611432565b508682101561146f5760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e198436030181126114de57600080fd5b83018035915067ffffffffffffffff8211156114f957600080fd5b602001915036819003821315610bc257600080fd5b6000808585111561151e57600080fd5b8386111561152b57600080fd5b5050820193919092039150565b8035602083101561027457600019602084900360031b1b1692915050565b8183823760009101908152919050565b60006001820161157857611578611349565b5060010190565b634e487b7160e01b600052602160045260246000fd5b8281526040602082015260006105a56040830184610f9f565b600082516115c0818460208701610f7b565b9190910192915050565b6000602082840312156115dc57600080fd5b505191905056fea26469706673582212203a866f9d17af0f3c4126275c9c7a8f7fe4e91a9d3d1909545f752806d389c49864736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100d45760003560e01c8063ac9650d811610081578063c91199411161005b578063c9119941146101e9578063e32954eb146101fc578063f3068a001461020f57600080fd5b8063ac9650d8146101a3578063bffbe61c146101c3578063c47f0027146101d657600080fd5b8063691f3431116100b2578063691f3431146101495780637f87032e1461016957806380d8db3d1461017c57600080fd5b806301ffc9a7146100d95780630affd653146101015780631fe93ea814610122575b600080fd5b6100ec6100e7366004610da7565b610236565b60405190151581526020015b60405180910390f35b61011461010f366004610ecb565b61027a565b6040519081526020016100f8565b6101147f000000000000000000000000000000000000000000000000000000000000000081565b61015c610157366004610f62565b6103b7565b6040516100f89190610fcb565b610114610177366004610fde565b610459565b6101147f000000000000000000000000000000000000000000000000000000000000000081565b6101b66101b13660046110a9565b61050a565b6040516100f891906110eb565b6101146101d136600461114d565b61051f565b6101146101e436600461116a565b61052a565b6101146101f73660046111a0565b610533565b6101b661020a3660046111f5565b610598565b6101147f000000000000000000000000000000000000000000000000000000000000000081565b60006001600160e01b031982167f07914f350000000000000000000000000000000000000000000000000000000014806102745750610274826105ad565b92915050565b600080610286886105eb565b9050600061031c30630affd65360e01b89898d8d8b7f00000000000000000000000000000000000000000000000000000000000000006040516020016102d3989796959493929190611234565b604051602081830303815290604052805190602001207f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c91909152603c902090565b9050610328898961064f565b61035e576040517f4570a02400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61036a848983886106d4565b61037582888861079a565b60405182906001600160a01b038b16907f6ada868dd3058cf77a48a74489fd7963688e5464b2b0fa957ace976243270e9290600090a350979650505050505050565b60008181526020819052604090208054606091906103d490611295565b80601f016020809104026020016040519081016040528092919081815260200182805461040090611295565b801561044d5780601f106104225761010080835404028352916020019161044d565b820191906000526020600020905b81548152906001019060200180831161043057829003601f168201915b50505050509050919050565b600080610465876105eb565b905060006104b030637f87032e60e01b89898c8a7f00000000000000000000000000000000000000000000000000000000000000006040516020016102d397969594939291906112cf565b90506104be848983886106d4565b6104c982888861079a565b60405182906001600160a01b038a16907f6ada868dd3058cf77a48a74489fd7963688e5464b2b0fa957ace976243270e9290600090a3509695505050505050565b6060610518600084846107f3565b9392505050565b6000610274826105eb565b60006105183384845b60008361053f816109e2565b600061054a866105eb565b905061055781868661079a565b60405181906001600160a01b038816907f6ada868dd3058cf77a48a74489fd7963688e5464b2b0fa957ace976243270e9290600090a391505b509392505050565b60606105a58484846107f3565b949350505050565b60006001600160e01b031982167f1698371f000000000000000000000000000000000000000000000000000000001480610274575061027482610a3c565b60007f0000000000000000000000000000000000000000000000000000000000000000610620836001600160a01b0316610aa3565b604080516020810193909352820152606001604051602081830303815290604052805190602001209050919050565b6000826001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156106ab575060408051601f3d908101601f191682019092526106a89181019061132c565b60015b6106b757506000610274565b826001600160a01b0316816001600160a01b031614915050610274565b6106df838386610b23565b610715576040517f8baa579f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b4281101561074f576040517f0819bdcd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61075b42610e1061135f565b811115610794576040517f5e4989ee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050565b60008381526020819052604090206107b38284836113c1565b50827fb7d29e911041e8d9b843369e890bcb72c9388692ba48b65ac54e7214c4c348f783836040516107e6929190611482565b60405180910390a2505050565b60608167ffffffffffffffff81111561080e5761080e610e28565b60405190808252806020026020018201604052801561084157816020015b606081526020019060019003908161082c5790505b50905060005b8281101561059057841561092a576000848483818110610869576108696114b1565b905060200281019061087b91906114c7565b61088a9160249160049161150e565b61089391611538565b9050858114610928576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603460248201527f6d756c746963616c6c3a20416c6c207265636f726473206d757374206861766560448201527f2061206d61746368696e67206e616d6568617368000000000000000000000000606482015260840160405180910390fd5b505b60008030868685818110610940576109406114b1565b905060200281019061095291906114c7565b604051610960929190611556565b600060405180830381855af49150503d806000811461099b576040519150601f19603f3d011682016040523d82523d6000602084013e6109a0565b606091505b5091509150816109af57600080fd5b808484815181106109c2576109c26114b1565b6020026020010181905250505080806109da90611566565b915050610847565b6001600160a01b0381163314801590610a025750610a00813361064f565b155b15610a39576040517fd7a2ae6a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b60006001600160e01b031982167f4fbf043300000000000000000000000000000000000000000000000000000000148061027457507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b0319831614610274565b600060285b8015610b1757600019017f3031323334353637383961626364656600000000000000000000000000000000600f84161a8153601090920491600019017f3031323334353637383961626364656600000000000000000000000000000000600f84161a8153601083049250610aa8565b50506028600020919050565b6000806000610b328585610b84565b90925090506000816004811115610b4b57610b4b61157f565b148015610b695750856001600160a01b0316826001600160a01b0316145b80610b7a5750610b7a868686610bc9565b9695505050505050565b6000808251604103610bba5760208301516040840151606085015160001a610bae87828585610ce3565b94509450505050610bc2565b506000905060025b9250929050565b6000806000856001600160a01b0316631626ba7e60e01b8686604051602401610bf3929190611595565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b0319909416939093179092529051610c4691906115ae565b600060405180830381855afa9150503d8060008114610c81576040519150601f19603f3d011682016040523d82523d6000602084013e610c86565b606091505b5091509150818015610c9a57506020815110155b8015610b7a575080517f1626ba7e0000000000000000000000000000000000000000000000000000000090610cd890830160209081019084016115ca565b149695505050505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115610d1a5750600090506003610d9e565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610d6e573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610d9757600060019250925050610d9e565b9150600090505b94509492505050565b600060208284031215610db957600080fd5b81356001600160e01b03198116811461051857600080fd5b6001600160a01b0381168114610a3957600080fd5b60008083601f840112610df857600080fd5b50813567ffffffffffffffff811115610e1057600080fd5b602083019150836020828501011115610bc257600080fd5b634e487b7160e01b600052604160045260246000fd5b600082601f830112610e4f57600080fd5b813567ffffffffffffffff80821115610e6a57610e6a610e28565b604051601f8301601f19908116603f01168101908282118183101715610e9257610e92610e28565b81604052838152866020858801011115610eab57600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060008060a08789031215610ee457600080fd5b8635610eef81610dd1565b95506020870135610eff81610dd1565b9450604087013567ffffffffffffffff80821115610f1c57600080fd5b610f288a838b01610de6565b9096509450606089013593506080890135915080821115610f4857600080fd5b50610f5589828a01610e3e565b9150509295509295509295565b600060208284031215610f7457600080fd5b5035919050565b60005b83811015610f96578181015183820152602001610f7e565b50506000910152565b60008151808452610fb7816020860160208601610f7b565b601f01601f19169290920160200192915050565b6020815260006105186020830184610f9f565b600080600080600060808688031215610ff657600080fd5b853561100181610dd1565b9450602086013567ffffffffffffffff8082111561101e57600080fd5b61102a89838a01610de6565b909650945060408801359350606088013591508082111561104a57600080fd5b5061105788828901610e3e565b9150509295509295909350565b60008083601f84011261107657600080fd5b50813567ffffffffffffffff81111561108e57600080fd5b6020830191508360208260051b8501011115610bc257600080fd5b600080602083850312156110bc57600080fd5b823567ffffffffffffffff8111156110d357600080fd5b6110df85828601611064565b90969095509350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561114057603f1988860301845261112e858351610f9f565b94509285019290850190600101611112565b5092979650505050505050565b60006020828403121561115f57600080fd5b813561051881610dd1565b6000806020838503121561117d57600080fd5b823567ffffffffffffffff81111561119457600080fd5b6110df85828601610de6565b6000806000604084860312156111b557600080fd5b83356111c081610dd1565b9250602084013567ffffffffffffffff8111156111dc57600080fd5b6111e886828701610de6565b9497909650939450505050565b60008060006040848603121561120a57600080fd5b83359250602084013567ffffffffffffffff81111561122857600080fd5b6111e886828701611064565b60006bffffffffffffffffffffffff19808b60601b1683526001600160e01b03198a16601484015287896018850137606096871b81169790920160188101979097525092841b909216602c8501526040840152908201526080019392505050565b600181811c908216806112a957607f821691505b6020821081036112c957634e487b7160e01b600052602260045260246000fd5b50919050565b60006bffffffffffffffffffffffff19808a60601b1683526001600160e01b03198916601484015286886018850137868301818760601b16601882015285602c82015284604c820152606c81019250505098975050505050505050565b60006020828403121561133e57600080fd5b815161051881610dd1565b634e487b7160e01b600052601160045260246000fd5b8082018082111561027457610274611349565b601f8211156113bc57600081815260208120601f850160051c810160208610156113995750805b601f850160051c820191505b818110156113b8578281556001016113a5565b5050505b505050565b67ffffffffffffffff8311156113d9576113d9610e28565b6113ed836113e78354611295565b83611372565b6000601f84116001811461142157600085156114095750838201355b600019600387901b1c1916600186901b17835561147b565b600083815260209020601f19861690835b828110156114525786850135825560209485019460019092019101611432565b508682101561146f5760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b60208152816020820152818360408301376000818301604090810191909152601f909201601f19160101919050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e198436030181126114de57600080fd5b83018035915067ffffffffffffffff8211156114f957600080fd5b602001915036819003821315610bc257600080fd5b6000808585111561151e57600080fd5b8386111561152b57600080fd5b5050820193919092039150565b8035602083101561027457600019602084900360031b1b1692915050565b8183823760009101908152919050565b60006001820161157857611578611349565b5060010190565b634e487b7160e01b600052602160045260246000fd5b8281526040602082015260006105a56040830184610f9f565b600082516115c0818460208701610f7b565b9190910192915050565b6000602082840312156115dc57600080fd5b505191905056fea26469706673582212203a866f9d17af0f3c4126275c9c7a8f7fe4e91a9d3d1909545f752806d389c49864736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "name(bytes32)": {
        "params": {
          "node": "The ENS node to query."
        },
        "returns": {
          "_0": "The associated name."
        }
      },
      "node(address)": {
        "details": "Returns the node hash for a given account's reverse records.",
        "params": {
          "addr": "The address to hash"
        },
        "returns": {
          "_0": "The ENS node hash."
        }
      },
      "setName(string)": {
        "details": "Sets the `name()` record for the reverse ENS record associated with the calling account.",
        "params": {
          "name": "The name to set for this address."
        },
        "returns": {
          "_0": "The ENS node hash of the reverse record."
        }
      },
      "setNameForAddr(address,string)": {
        "details": "Sets the `name()` record for the reverse ENS record associated with the addr provided account. Can be used if the addr is a contract that is owned by a SCW.",
        "params": {
          "name": "The name to set for this address."
        },
        "returns": {
          "_0": "The ENS node hash of the reverse record."
        }
      },
      "setNameForAddrWithSignature(address,string,uint256,bytes)": {
        "details": "Sets the name for an addr using a signature that can be verified with ERC1271.",
        "params": {
          "addr": "The reverse record to set",
          "name": "The name of the reverse record",
          "signature": "The resolver of the reverse node",
          "signatureExpiry": "Date when the signature expires"
        },
        "returns": {
          "_0": "The ENS node hash of the reverse record."
        }
      },
      "setNameForAddrWithSignatureAndOwnable(address,address,string,uint256,bytes)": {
        "details": "Sets the name for a contract that is owned by a SCW using a signature",
        "params": {
          "contractAddr": "The reverse node to set",
          "name": "The name of the reverse record",
          "owner": "The owner of the contract (via Ownable)",
          "signature": "The signature of an address that will return true on isValidSignature for the owner",
          "signatureExpiry": "Date when the signature expires"
        },
        "returns": {
          "_0": "The ENS node hash of the reverse record."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "name(bytes32)": {
        "notice": "Returns the name associated with an ENS node, for reverse records. Defined in EIP181."
      }
    },
    "notice": "A L2 reverse resolver. Deployed to each L2 chain.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 20105,
        "contract": "contracts/reverseRegistrar/L2ReverseResolver.sol:L2ReverseResolver",
        "label": "names",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_string_storage)"
      }
    ],
    "types": {
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}